// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetaData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MetaData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MetaData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MetaData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MetaData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace PFAData {
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class Registration;
class RegistrationDefaultTypeInternal;
extern RegistrationDefaultTypeInternal _Registration_default_instance_;
class Score;
class ScoreDefaultTypeInternal;
extern ScoreDefaultTypeInternal _Score_default_instance_;
class SongInfo;
class SongInfoDefaultTypeInternal;
extern SongInfoDefaultTypeInternal _SongInfo_default_instance_;
}  // namespace PFAData
PROTOBUF_NAMESPACE_OPEN
template<> ::PFAData::File* Arena::CreateMaybeMessage<::PFAData::File>(Arena*);
template<> ::PFAData::FileInfo* Arena::CreateMaybeMessage<::PFAData::FileInfo>(Arena*);
template<> ::PFAData::Label* Arena::CreateMaybeMessage<::PFAData::Label>(Arena*);
template<> ::PFAData::MetaData* Arena::CreateMaybeMessage<::PFAData::MetaData>(Arena*);
template<> ::PFAData::Registration* Arena::CreateMaybeMessage<::PFAData::Registration>(Arena*);
template<> ::PFAData::Score* Arena::CreateMaybeMessage<::PFAData::Score>(Arena*);
template<> ::PFAData::SongInfo* Arena::CreateMaybeMessage<::PFAData::SongInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PFAData {

// ===================================================================

class Label PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PFAData.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  virtual ~Label();

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFAData.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kPosFieldNumber = 1,
  };
  // required string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // required int32 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PFAData.Label)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  friend struct ::TableStruct_MetaData_2eproto;
};
// -------------------------------------------------------------------

class Score PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PFAData.Score) */ {
 public:
  inline Score() : Score(nullptr) {}
  virtual ~Score();

  Score(const Score& from);
  Score(Score&& from) noexcept
    : Score() {
    *this = ::std::move(from);
  }

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }
  inline Score& operator=(Score&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Score& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Score* internal_default_instance() {
    return reinterpret_cast<const Score*>(
               &_Score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Score& a, Score& b) {
    a.Swap(&b);
  }
  inline void Swap(Score* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Score* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Score* New() const final {
    return CreateMaybeMessage<Score>(nullptr);
  }

  Score* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Score>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Score& from);
  void MergeFrom(const Score& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Score* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFAData.Score";
  }
  protected:
  explicit Score(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kMissedFieldNumber = 3,
    kIncorrectFieldNumber = 4,
    kOkFieldNumber = 5,
    kGoodFieldNumber = 6,
    kGreatFieldNumber = 7,
    kCurStreakFieldNumber = 8,
    kGoodStreakFieldNumber = 9,
    kBadStreakFieldNumber = 10,
    kDateFieldNumber = 11,
    kMultFieldNumber = 2,
  };
  // required sint32 score = 1;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 missed = 3;
  bool has_missed() const;
  private:
  bool _internal_has_missed() const;
  public:
  void clear_missed();
  ::PROTOBUF_NAMESPACE_ID::int32 missed() const;
  void set_missed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_missed() const;
  void _internal_set_missed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 incorrect = 4;
  bool has_incorrect() const;
  private:
  bool _internal_has_incorrect() const;
  public:
  void clear_incorrect();
  ::PROTOBUF_NAMESPACE_ID::int32 incorrect() const;
  void set_incorrect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_incorrect() const;
  void _internal_set_incorrect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ok = 5;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  ::PROTOBUF_NAMESPACE_ID::int32 ok() const;
  void set_ok(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ok() const;
  void _internal_set_ok(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 good = 6;
  bool has_good() const;
  private:
  bool _internal_has_good() const;
  public:
  void clear_good();
  ::PROTOBUF_NAMESPACE_ID::int32 good() const;
  void set_good(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_good() const;
  void _internal_set_good(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 great = 7;
  bool has_great() const;
  private:
  bool _internal_has_great() const;
  public:
  void clear_great();
  ::PROTOBUF_NAMESPACE_ID::int32 great() const;
  void set_great(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_great() const;
  void _internal_set_great(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 curStreak = 8;
  bool has_curstreak() const;
  private:
  bool _internal_has_curstreak() const;
  public:
  void clear_curstreak();
  ::PROTOBUF_NAMESPACE_ID::int32 curstreak() const;
  void set_curstreak(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curstreak() const;
  void _internal_set_curstreak(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 goodStreak = 9;
  bool has_goodstreak() const;
  private:
  bool _internal_has_goodstreak() const;
  public:
  void clear_goodstreak();
  ::PROTOBUF_NAMESPACE_ID::int32 goodstreak() const;
  void set_goodstreak(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodstreak() const;
  void _internal_set_goodstreak(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 badStreak = 10;
  bool has_badstreak() const;
  private:
  bool _internal_has_badstreak() const;
  public:
  void clear_badstreak();
  ::PROTOBUF_NAMESPACE_ID::int32 badstreak() const;
  void set_badstreak(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_badstreak() const;
  void _internal_set_badstreak(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 date = 11;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int32 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mult = 2 [default = 10];
  bool has_mult() const;
  private:
  bool _internal_has_mult() const;
  public:
  void clear_mult();
  ::PROTOBUF_NAMESPACE_ID::int32 mult() const;
  void set_mult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mult() const;
  void _internal_set_mult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PFAData.Score)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 missed_;
  ::PROTOBUF_NAMESPACE_ID::int32 incorrect_;
  ::PROTOBUF_NAMESPACE_ID::int32 ok_;
  ::PROTOBUF_NAMESPACE_ID::int32 good_;
  ::PROTOBUF_NAMESPACE_ID::int32 great_;
  ::PROTOBUF_NAMESPACE_ID::int32 curstreak_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodstreak_;
  ::PROTOBUF_NAMESPACE_ID::int32 badstreak_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_;
  ::PROTOBUF_NAMESPACE_ID::int32 mult_;
  friend struct ::TableStruct_MetaData_2eproto;
};
// -------------------------------------------------------------------

class SongInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PFAData.SongInfo) */ {
 public:
  inline SongInfo() : SongInfo(nullptr) {}
  virtual ~SongInfo();

  SongInfo(const SongInfo& from);
  SongInfo(SongInfo&& from) noexcept
    : SongInfo() {
    *this = ::std::move(from);
  }

  inline SongInfo& operator=(const SongInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SongInfo& operator=(SongInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SongInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SongInfo* internal_default_instance() {
    return reinterpret_cast<const SongInfo*>(
               &_SongInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SongInfo& a, SongInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SongInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SongInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SongInfo* New() const final {
    return CreateMaybeMessage<SongInfo>(nullptr);
  }

  SongInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SongInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SongInfo& from);
  void MergeFrom(const SongInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SongInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFAData.SongInfo";
  }
  protected:
  explicit SongInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kDivisionFieldNumber = 2,
    kNotesFieldNumber = 3,
    kBeatsFieldNumber = 4,
    kSecondsFieldNumber = 5,
    kTracksFieldNumber = 6,
    kPlaysFieldNumber = 7,
  };
  // required bytes md5 = 1;
  bool has_md5() const;
  private:
  bool _internal_has_md5() const;
  public:
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const void* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // optional int32 division = 2;
  bool has_division() const;
  private:
  bool _internal_has_division() const;
  public:
  void clear_division();
  ::PROTOBUF_NAMESPACE_ID::int32 division() const;
  void set_division(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_division() const;
  void _internal_set_division(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 notes = 3;
  bool has_notes() const;
  private:
  bool _internal_has_notes() const;
  public:
  void clear_notes();
  ::PROTOBUF_NAMESPACE_ID::int32 notes() const;
  void set_notes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_notes() const;
  void _internal_set_notes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 beats = 4;
  bool has_beats() const;
  private:
  bool _internal_has_beats() const;
  public:
  void clear_beats();
  ::PROTOBUF_NAMESPACE_ID::int32 beats() const;
  void set_beats(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beats() const;
  void _internal_set_beats(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 seconds = 5;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tracks = 6;
  bool has_tracks() const;
  private:
  bool _internal_has_tracks() const;
  public:
  void clear_tracks();
  ::PROTOBUF_NAMESPACE_ID::int32 tracks() const;
  void set_tracks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracks() const;
  void _internal_set_tracks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 plays = 7;
  bool has_plays() const;
  private:
  bool _internal_has_plays() const;
  public:
  void clear_plays();
  ::PROTOBUF_NAMESPACE_ID::int32 plays() const;
  void set_plays(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plays() const;
  void _internal_set_plays(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PFAData.SongInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::int32 division_;
  ::PROTOBUF_NAMESPACE_ID::int32 notes_;
  ::PROTOBUF_NAMESPACE_ID::int32 beats_;
  ::PROTOBUF_NAMESPACE_ID::int32 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracks_;
  ::PROTOBUF_NAMESPACE_ID::int32 plays_;
  friend struct ::TableStruct_MetaData_2eproto;
};
// -------------------------------------------------------------------

class FileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PFAData.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFAData.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kTop10FieldNumber = 3,
    kInfoFieldNumber = 1,
  };
  // repeated .PFAData.Label label = 2;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  ::PFAData::Label* mutable_label(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Label >*
      mutable_label();
  private:
  const ::PFAData::Label& _internal_label(int index) const;
  ::PFAData::Label* _internal_add_label();
  public:
  const ::PFAData::Label& label(int index) const;
  ::PFAData::Label* add_label();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Label >&
      label() const;

  // repeated .PFAData.Score top10 = 3;
  int top10_size() const;
  private:
  int _internal_top10_size() const;
  public:
  void clear_top10();
  ::PFAData::Score* mutable_top10(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Score >*
      mutable_top10();
  private:
  const ::PFAData::Score& _internal_top10(int index) const;
  ::PFAData::Score* _internal_add_top10();
  public:
  const ::PFAData::Score& top10(int index) const;
  ::PFAData::Score* add_top10();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Score >&
      top10() const;

  // required .PFAData.SongInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::PFAData::SongInfo& info() const;
  ::PFAData::SongInfo* release_info();
  ::PFAData::SongInfo* mutable_info();
  void set_allocated_info(::PFAData::SongInfo* info);
  private:
  const ::PFAData::SongInfo& _internal_info() const;
  ::PFAData::SongInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::PFAData::SongInfo* info);
  ::PFAData::SongInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:PFAData.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Label > label_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Score > top10_;
  ::PFAData::SongInfo* info_;
  friend struct ::TableStruct_MetaData_2eproto;
};
// -------------------------------------------------------------------

class File PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PFAData.File) */ {
 public:
  inline File() : File(nullptr) {}
  virtual ~File();

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(nullptr);
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFAData.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kInfoPosFieldNumber = 3,
  };
  // required string fileName = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // required int32 fileSize = 2;
  bool has_filesize() const;
  private:
  bool _internal_has_filesize() const;
  public:
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int32 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 infoPos = 3;
  bool has_infopos() const;
  private:
  bool _internal_has_infopos() const;
  public:
  void clear_infopos();
  ::PROTOBUF_NAMESPACE_ID::int32 infopos() const;
  void set_infopos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_infopos() const;
  void _internal_set_infopos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PFAData.File)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 filesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 infopos_;
  friend struct ::TableStruct_MetaData_2eproto;
};
// -------------------------------------------------------------------

class MetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PFAData.MetaData) */ {
 public:
  inline MetaData() : MetaData(nullptr) {}
  virtual ~MetaData();

  MetaData(const MetaData& from);
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(nullptr);
  }

  MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFAData.MetaData";
  }
  protected:
  explicit MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kFileInfoFieldNumber = 2,
  };
  // repeated .PFAData.File file = 1;
  int file_size() const;
  private:
  int _internal_file_size() const;
  public:
  void clear_file();
  ::PFAData::File* mutable_file(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::File >*
      mutable_file();
  private:
  const ::PFAData::File& _internal_file(int index) const;
  ::PFAData::File* _internal_add_file();
  public:
  const ::PFAData::File& file(int index) const;
  ::PFAData::File* add_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::File >&
      file() const;

  // repeated .PFAData.FileInfo fileInfo = 2;
  int fileinfo_size() const;
  private:
  int _internal_fileinfo_size() const;
  public:
  void clear_fileinfo();
  ::PFAData::FileInfo* mutable_fileinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::FileInfo >*
      mutable_fileinfo();
  private:
  const ::PFAData::FileInfo& _internal_fileinfo(int index) const;
  ::PFAData::FileInfo* _internal_add_fileinfo();
  public:
  const ::PFAData::FileInfo& fileinfo(int index) const;
  ::PFAData::FileInfo* add_fileinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::FileInfo >&
      fileinfo() const;

  // @@protoc_insertion_point(class_scope:PFAData.MetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::File > file_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::FileInfo > fileinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetaData_2eproto;
};
// -------------------------------------------------------------------

class Registration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PFAData.Registration) */ {
 public:
  inline Registration() : Registration(nullptr) {}
  virtual ~Registration();

  Registration(const Registration& from);
  Registration(Registration&& from) noexcept
    : Registration() {
    *this = ::std::move(from);
  }

  inline Registration& operator=(const Registration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Registration& operator=(Registration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Registration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Registration* internal_default_instance() {
    return reinterpret_cast<const Registration*>(
               &_Registration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Registration& a, Registration& b) {
    a.Swap(&b);
  }
  inline void Swap(Registration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Registration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Registration* New() const final {
    return CreateMaybeMessage<Registration>(nullptr);
  }

  Registration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Registration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Registration& from);
  void MergeFrom(const Registration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Registration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PFAData.Registration";
  }
  protected:
  explicit Registration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplaynameFieldNumber = 1,
    kNameFieldNumber = 2,
    kKeyFieldNumber = 3,
    kDateFieldNumber = 4,
  };
  // optional string displayname = 1;
  bool has_displayname() const;
  private:
  bool _internal_has_displayname() const;
  public:
  void clear_displayname();
  const std::string& displayname() const;
  void set_displayname(const std::string& value);
  void set_displayname(std::string&& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  std::string* mutable_displayname();
  std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional int32 date = 4;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int32 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PFAData.Registration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_;
  friend struct ::TableStruct_MetaData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Label

// required int32 pos = 1;
inline bool Label::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Label::has_pos() const {
  return _internal_has_pos();
}
inline void Label::clear_pos() {
  pos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Label::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Label::pos() const {
  // @@protoc_insertion_point(field_get:PFAData.Label.pos)
  return _internal_pos();
}
inline void Label::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pos_ = value;
}
inline void Label::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:PFAData.Label.pos)
}

// required string label = 2;
inline bool Label::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Label::has_label() const {
  return _internal_has_label();
}
inline void Label::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Label::label() const {
  // @@protoc_insertion_point(field_get:PFAData.Label.label)
  return _internal_label();
}
inline void Label::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:PFAData.Label.label)
}
inline std::string* Label::mutable_label() {
  // @@protoc_insertion_point(field_mutable:PFAData.Label.label)
  return _internal_mutable_label();
}
inline const std::string& Label::_internal_label() const {
  return label_.Get();
}
inline void Label::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PFAData.Label.label)
}
inline void Label::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PFAData.Label.label)
}
inline void Label::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PFAData.Label.label)
}
inline std::string* Label::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_label() {
  // @@protoc_insertion_point(field_release:PFAData.Label.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PFAData.Label.label)
}

// -------------------------------------------------------------------

// Score

// required sint32 score = 1;
inline bool Score::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Score::has_score() const {
  return _internal_has_score();
}
inline void Score::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::score() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.score)
  return _internal_score();
}
inline void Score::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  score_ = value;
}
inline void Score::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.score)
}

// optional int32 mult = 2 [default = 10];
inline bool Score::_internal_has_mult() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Score::has_mult() const {
  return _internal_has_mult();
}
inline void Score::clear_mult() {
  mult_ = 10;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_mult() const {
  return mult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::mult() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.mult)
  return _internal_mult();
}
inline void Score::_internal_set_mult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  mult_ = value;
}
inline void Score::set_mult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mult(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.mult)
}

// optional int32 missed = 3;
inline bool Score::_internal_has_missed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Score::has_missed() const {
  return _internal_has_missed();
}
inline void Score::clear_missed() {
  missed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_missed() const {
  return missed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::missed() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.missed)
  return _internal_missed();
}
inline void Score::_internal_set_missed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  missed_ = value;
}
inline void Score::set_missed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_missed(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.missed)
}

// optional int32 incorrect = 4;
inline bool Score::_internal_has_incorrect() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Score::has_incorrect() const {
  return _internal_has_incorrect();
}
inline void Score::clear_incorrect() {
  incorrect_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_incorrect() const {
  return incorrect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::incorrect() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.incorrect)
  return _internal_incorrect();
}
inline void Score::_internal_set_incorrect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  incorrect_ = value;
}
inline void Score::set_incorrect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_incorrect(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.incorrect)
}

// optional int32 ok = 5;
inline bool Score::_internal_has_ok() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Score::has_ok() const {
  return _internal_has_ok();
}
inline void Score::clear_ok() {
  ok_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_ok() const {
  return ok_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::ok() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.ok)
  return _internal_ok();
}
inline void Score::_internal_set_ok(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ok_ = value;
}
inline void Score::set_ok(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.ok)
}

// optional int32 good = 6;
inline bool Score::_internal_has_good() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Score::has_good() const {
  return _internal_has_good();
}
inline void Score::clear_good() {
  good_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_good() const {
  return good_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::good() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.good)
  return _internal_good();
}
inline void Score::_internal_set_good(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  good_ = value;
}
inline void Score::set_good(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_good(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.good)
}

// optional int32 great = 7;
inline bool Score::_internal_has_great() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Score::has_great() const {
  return _internal_has_great();
}
inline void Score::clear_great() {
  great_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_great() const {
  return great_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::great() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.great)
  return _internal_great();
}
inline void Score::_internal_set_great(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  great_ = value;
}
inline void Score::set_great(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_great(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.great)
}

// optional sint32 curStreak = 8;
inline bool Score::_internal_has_curstreak() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Score::has_curstreak() const {
  return _internal_has_curstreak();
}
inline void Score::clear_curstreak() {
  curstreak_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_curstreak() const {
  return curstreak_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::curstreak() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.curStreak)
  return _internal_curstreak();
}
inline void Score::_internal_set_curstreak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  curstreak_ = value;
}
inline void Score::set_curstreak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curstreak(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.curStreak)
}

// optional int32 goodStreak = 9;
inline bool Score::_internal_has_goodstreak() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Score::has_goodstreak() const {
  return _internal_has_goodstreak();
}
inline void Score::clear_goodstreak() {
  goodstreak_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_goodstreak() const {
  return goodstreak_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::goodstreak() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.goodStreak)
  return _internal_goodstreak();
}
inline void Score::_internal_set_goodstreak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  goodstreak_ = value;
}
inline void Score::set_goodstreak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodstreak(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.goodStreak)
}

// optional int32 badStreak = 10;
inline bool Score::_internal_has_badstreak() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Score::has_badstreak() const {
  return _internal_has_badstreak();
}
inline void Score::clear_badstreak() {
  badstreak_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_badstreak() const {
  return badstreak_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::badstreak() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.badStreak)
  return _internal_badstreak();
}
inline void Score::_internal_set_badstreak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  badstreak_ = value;
}
inline void Score::set_badstreak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_badstreak(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.badStreak)
}

// optional int32 date = 11;
inline bool Score::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Score::has_date() const {
  return _internal_has_date();
}
inline void Score::clear_date() {
  date_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::date() const {
  // @@protoc_insertion_point(field_get:PFAData.Score.date)
  return _internal_date();
}
inline void Score::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  date_ = value;
}
inline void Score::set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:PFAData.Score.date)
}

// -------------------------------------------------------------------

// SongInfo

// required bytes md5 = 1;
inline bool SongInfo::_internal_has_md5() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SongInfo::has_md5() const {
  return _internal_has_md5();
}
inline void SongInfo::clear_md5() {
  md5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SongInfo::md5() const {
  // @@protoc_insertion_point(field_get:PFAData.SongInfo.md5)
  return _internal_md5();
}
inline void SongInfo::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:PFAData.SongInfo.md5)
}
inline std::string* SongInfo::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:PFAData.SongInfo.md5)
  return _internal_mutable_md5();
}
inline const std::string& SongInfo::_internal_md5() const {
  return md5_.Get();
}
inline void SongInfo::_internal_set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  md5_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SongInfo::set_md5(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  md5_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PFAData.SongInfo.md5)
}
inline void SongInfo::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  md5_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PFAData.SongInfo.md5)
}
inline void SongInfo::set_md5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  md5_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PFAData.SongInfo.md5)
}
inline std::string* SongInfo::_internal_mutable_md5() {
  _has_bits_[0] |= 0x00000001u;
  return md5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SongInfo::release_md5() {
  // @@protoc_insertion_point(field_release:PFAData.SongInfo.md5)
  if (!_internal_has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return md5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SongInfo::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PFAData.SongInfo.md5)
}

// optional int32 division = 2;
inline bool SongInfo::_internal_has_division() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SongInfo::has_division() const {
  return _internal_has_division();
}
inline void SongInfo::clear_division() {
  division_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::_internal_division() const {
  return division_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::division() const {
  // @@protoc_insertion_point(field_get:PFAData.SongInfo.division)
  return _internal_division();
}
inline void SongInfo::_internal_set_division(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  division_ = value;
}
inline void SongInfo::set_division(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_division(value);
  // @@protoc_insertion_point(field_set:PFAData.SongInfo.division)
}

// optional int32 notes = 3;
inline bool SongInfo::_internal_has_notes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SongInfo::has_notes() const {
  return _internal_has_notes();
}
inline void SongInfo::clear_notes() {
  notes_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::_internal_notes() const {
  return notes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::notes() const {
  // @@protoc_insertion_point(field_get:PFAData.SongInfo.notes)
  return _internal_notes();
}
inline void SongInfo::_internal_set_notes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  notes_ = value;
}
inline void SongInfo::set_notes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:PFAData.SongInfo.notes)
}

// optional int32 beats = 4;
inline bool SongInfo::_internal_has_beats() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SongInfo::has_beats() const {
  return _internal_has_beats();
}
inline void SongInfo::clear_beats() {
  beats_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::_internal_beats() const {
  return beats_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::beats() const {
  // @@protoc_insertion_point(field_get:PFAData.SongInfo.beats)
  return _internal_beats();
}
inline void SongInfo::_internal_set_beats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  beats_ = value;
}
inline void SongInfo::set_beats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beats(value);
  // @@protoc_insertion_point(field_set:PFAData.SongInfo.beats)
}

// optional int32 seconds = 5;
inline bool SongInfo::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SongInfo::has_seconds() const {
  return _internal_has_seconds();
}
inline void SongInfo::clear_seconds() {
  seconds_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::seconds() const {
  // @@protoc_insertion_point(field_get:PFAData.SongInfo.seconds)
  return _internal_seconds();
}
inline void SongInfo::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  seconds_ = value;
}
inline void SongInfo::set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:PFAData.SongInfo.seconds)
}

// optional int32 tracks = 6;
inline bool SongInfo::_internal_has_tracks() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SongInfo::has_tracks() const {
  return _internal_has_tracks();
}
inline void SongInfo::clear_tracks() {
  tracks_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::_internal_tracks() const {
  return tracks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::tracks() const {
  // @@protoc_insertion_point(field_get:PFAData.SongInfo.tracks)
  return _internal_tracks();
}
inline void SongInfo::_internal_set_tracks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  tracks_ = value;
}
inline void SongInfo::set_tracks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracks(value);
  // @@protoc_insertion_point(field_set:PFAData.SongInfo.tracks)
}

// optional int32 plays = 7;
inline bool SongInfo::_internal_has_plays() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SongInfo::has_plays() const {
  return _internal_has_plays();
}
inline void SongInfo::clear_plays() {
  plays_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::_internal_plays() const {
  return plays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SongInfo::plays() const {
  // @@protoc_insertion_point(field_get:PFAData.SongInfo.plays)
  return _internal_plays();
}
inline void SongInfo::_internal_set_plays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  plays_ = value;
}
inline void SongInfo::set_plays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plays(value);
  // @@protoc_insertion_point(field_set:PFAData.SongInfo.plays)
}

// -------------------------------------------------------------------

// FileInfo

// required .PFAData.SongInfo info = 1;
inline bool FileInfo::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool FileInfo::has_info() const {
  return _internal_has_info();
}
inline void FileInfo::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PFAData::SongInfo& FileInfo::_internal_info() const {
  const ::PFAData::SongInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PFAData::SongInfo*>(
      &::PFAData::_SongInfo_default_instance_);
}
inline const ::PFAData::SongInfo& FileInfo::info() const {
  // @@protoc_insertion_point(field_get:PFAData.FileInfo.info)
  return _internal_info();
}
inline void FileInfo::unsafe_arena_set_allocated_info(
    ::PFAData::SongInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PFAData.FileInfo.info)
}
inline ::PFAData::SongInfo* FileInfo::release_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::PFAData::SongInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PFAData::SongInfo* FileInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:PFAData.FileInfo.info)
  _has_bits_[0] &= ~0x00000001u;
  ::PFAData::SongInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::PFAData::SongInfo* FileInfo::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PFAData::SongInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::PFAData::SongInfo* FileInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:PFAData.FileInfo.info)
  return _internal_mutable_info();
}
inline void FileInfo::set_allocated_info(::PFAData::SongInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:PFAData.FileInfo.info)
}

// repeated .PFAData.Label label = 2;
inline int FileInfo::_internal_label_size() const {
  return label_.size();
}
inline int FileInfo::label_size() const {
  return _internal_label_size();
}
inline void FileInfo::clear_label() {
  label_.Clear();
}
inline ::PFAData::Label* FileInfo::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:PFAData.FileInfo.label)
  return label_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Label >*
FileInfo::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:PFAData.FileInfo.label)
  return &label_;
}
inline const ::PFAData::Label& FileInfo::_internal_label(int index) const {
  return label_.Get(index);
}
inline const ::PFAData::Label& FileInfo::label(int index) const {
  // @@protoc_insertion_point(field_get:PFAData.FileInfo.label)
  return _internal_label(index);
}
inline ::PFAData::Label* FileInfo::_internal_add_label() {
  return label_.Add();
}
inline ::PFAData::Label* FileInfo::add_label() {
  // @@protoc_insertion_point(field_add:PFAData.FileInfo.label)
  return _internal_add_label();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Label >&
FileInfo::label() const {
  // @@protoc_insertion_point(field_list:PFAData.FileInfo.label)
  return label_;
}

// repeated .PFAData.Score top10 = 3;
inline int FileInfo::_internal_top10_size() const {
  return top10_.size();
}
inline int FileInfo::top10_size() const {
  return _internal_top10_size();
}
inline void FileInfo::clear_top10() {
  top10_.Clear();
}
inline ::PFAData::Score* FileInfo::mutable_top10(int index) {
  // @@protoc_insertion_point(field_mutable:PFAData.FileInfo.top10)
  return top10_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Score >*
FileInfo::mutable_top10() {
  // @@protoc_insertion_point(field_mutable_list:PFAData.FileInfo.top10)
  return &top10_;
}
inline const ::PFAData::Score& FileInfo::_internal_top10(int index) const {
  return top10_.Get(index);
}
inline const ::PFAData::Score& FileInfo::top10(int index) const {
  // @@protoc_insertion_point(field_get:PFAData.FileInfo.top10)
  return _internal_top10(index);
}
inline ::PFAData::Score* FileInfo::_internal_add_top10() {
  return top10_.Add();
}
inline ::PFAData::Score* FileInfo::add_top10() {
  // @@protoc_insertion_point(field_add:PFAData.FileInfo.top10)
  return _internal_add_top10();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::Score >&
FileInfo::top10() const {
  // @@protoc_insertion_point(field_list:PFAData.FileInfo.top10)
  return top10_;
}

// -------------------------------------------------------------------

// File

// required string fileName = 1;
inline bool File::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_filename() const {
  return _internal_has_filename();
}
inline void File::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& File::filename() const {
  // @@protoc_insertion_point(field_get:PFAData.File.fileName)
  return _internal_filename();
}
inline void File::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:PFAData.File.fileName)
}
inline std::string* File::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:PFAData.File.fileName)
  return _internal_mutable_filename();
}
inline const std::string& File::_internal_filename() const {
  return filename_.Get();
}
inline void File::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void File::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PFAData.File.fileName)
}
inline void File::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PFAData.File.fileName)
}
inline void File::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PFAData.File.fileName)
}
inline std::string* File::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* File::release_filename() {
  // @@protoc_insertion_point(field_release:PFAData.File.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void File::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PFAData.File.fileName)
}

// required int32 fileSize = 2;
inline bool File::_internal_has_filesize() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool File::has_filesize() const {
  return _internal_has_filesize();
}
inline void File::clear_filesize() {
  filesize_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 File::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 File::filesize() const {
  // @@protoc_insertion_point(field_get:PFAData.File.fileSize)
  return _internal_filesize();
}
inline void File::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  filesize_ = value;
}
inline void File::set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:PFAData.File.fileSize)
}

// required int32 infoPos = 3;
inline bool File::_internal_has_infopos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool File::has_infopos() const {
  return _internal_has_infopos();
}
inline void File::clear_infopos() {
  infopos_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 File::_internal_infopos() const {
  return infopos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 File::infopos() const {
  // @@protoc_insertion_point(field_get:PFAData.File.infoPos)
  return _internal_infopos();
}
inline void File::_internal_set_infopos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  infopos_ = value;
}
inline void File::set_infopos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_infopos(value);
  // @@protoc_insertion_point(field_set:PFAData.File.infoPos)
}

// -------------------------------------------------------------------

// MetaData

// repeated .PFAData.File file = 1;
inline int MetaData::_internal_file_size() const {
  return file_.size();
}
inline int MetaData::file_size() const {
  return _internal_file_size();
}
inline void MetaData::clear_file() {
  file_.Clear();
}
inline ::PFAData::File* MetaData::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:PFAData.MetaData.file)
  return file_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::File >*
MetaData::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:PFAData.MetaData.file)
  return &file_;
}
inline const ::PFAData::File& MetaData::_internal_file(int index) const {
  return file_.Get(index);
}
inline const ::PFAData::File& MetaData::file(int index) const {
  // @@protoc_insertion_point(field_get:PFAData.MetaData.file)
  return _internal_file(index);
}
inline ::PFAData::File* MetaData::_internal_add_file() {
  return file_.Add();
}
inline ::PFAData::File* MetaData::add_file() {
  // @@protoc_insertion_point(field_add:PFAData.MetaData.file)
  return _internal_add_file();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::File >&
MetaData::file() const {
  // @@protoc_insertion_point(field_list:PFAData.MetaData.file)
  return file_;
}

// repeated .PFAData.FileInfo fileInfo = 2;
inline int MetaData::_internal_fileinfo_size() const {
  return fileinfo_.size();
}
inline int MetaData::fileinfo_size() const {
  return _internal_fileinfo_size();
}
inline void MetaData::clear_fileinfo() {
  fileinfo_.Clear();
}
inline ::PFAData::FileInfo* MetaData::mutable_fileinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PFAData.MetaData.fileInfo)
  return fileinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::FileInfo >*
MetaData::mutable_fileinfo() {
  // @@protoc_insertion_point(field_mutable_list:PFAData.MetaData.fileInfo)
  return &fileinfo_;
}
inline const ::PFAData::FileInfo& MetaData::_internal_fileinfo(int index) const {
  return fileinfo_.Get(index);
}
inline const ::PFAData::FileInfo& MetaData::fileinfo(int index) const {
  // @@protoc_insertion_point(field_get:PFAData.MetaData.fileInfo)
  return _internal_fileinfo(index);
}
inline ::PFAData::FileInfo* MetaData::_internal_add_fileinfo() {
  return fileinfo_.Add();
}
inline ::PFAData::FileInfo* MetaData::add_fileinfo() {
  // @@protoc_insertion_point(field_add:PFAData.MetaData.fileInfo)
  return _internal_add_fileinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PFAData::FileInfo >&
MetaData::fileinfo() const {
  // @@protoc_insertion_point(field_list:PFAData.MetaData.fileInfo)
  return fileinfo_;
}

// -------------------------------------------------------------------

// Registration

// optional string displayname = 1;
inline bool Registration::_internal_has_displayname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Registration::has_displayname() const {
  return _internal_has_displayname();
}
inline void Registration::clear_displayname() {
  displayname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Registration::displayname() const {
  // @@protoc_insertion_point(field_get:PFAData.Registration.displayname)
  return _internal_displayname();
}
inline void Registration::set_displayname(const std::string& value) {
  _internal_set_displayname(value);
  // @@protoc_insertion_point(field_set:PFAData.Registration.displayname)
}
inline std::string* Registration::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:PFAData.Registration.displayname)
  return _internal_mutable_displayname();
}
inline const std::string& Registration::_internal_displayname() const {
  return displayname_.Get();
}
inline void Registration::_internal_set_displayname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_displayname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PFAData.Registration.displayname)
}
inline void Registration::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  displayname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PFAData.Registration.displayname)
}
inline void Registration::set_displayname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  displayname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PFAData.Registration.displayname)
}
inline std::string* Registration::_internal_mutable_displayname() {
  _has_bits_[0] |= 0x00000001u;
  return displayname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_displayname() {
  // @@protoc_insertion_point(field_release:PFAData.Registration.displayname)
  if (!_internal_has_displayname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return displayname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PFAData.Registration.displayname)
}

// optional string name = 2;
inline bool Registration::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Registration::has_name() const {
  return _internal_has_name();
}
inline void Registration::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Registration::name() const {
  // @@protoc_insertion_point(field_get:PFAData.Registration.name)
  return _internal_name();
}
inline void Registration::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PFAData.Registration.name)
}
inline std::string* Registration::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PFAData.Registration.name)
  return _internal_mutable_name();
}
inline const std::string& Registration::_internal_name() const {
  return name_.Get();
}
inline void Registration::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PFAData.Registration.name)
}
inline void Registration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PFAData.Registration.name)
}
inline void Registration::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PFAData.Registration.name)
}
inline std::string* Registration::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_name() {
  // @@protoc_insertion_point(field_release:PFAData.Registration.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PFAData.Registration.name)
}

// optional bytes key = 3;
inline bool Registration::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Registration::has_key() const {
  return _internal_has_key();
}
inline void Registration::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Registration::key() const {
  // @@protoc_insertion_point(field_get:PFAData.Registration.key)
  return _internal_key();
}
inline void Registration::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:PFAData.Registration.key)
}
inline std::string* Registration::mutable_key() {
  // @@protoc_insertion_point(field_mutable:PFAData.Registration.key)
  return _internal_mutable_key();
}
inline const std::string& Registration::_internal_key() const {
  return key_.Get();
}
inline void Registration::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Registration::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  key_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PFAData.Registration.key)
}
inline void Registration::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PFAData.Registration.key)
}
inline void Registration::set_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  key_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PFAData.Registration.key)
}
inline std::string* Registration::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000004u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Registration::release_key() {
  // @@protoc_insertion_point(field_release:PFAData.Registration.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Registration::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PFAData.Registration.key)
}

// optional int32 date = 4;
inline bool Registration::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Registration::has_date() const {
  return _internal_has_date();
}
inline void Registration::clear_date() {
  date_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Registration::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Registration::date() const {
  // @@protoc_insertion_point(field_get:PFAData.Registration.date)
  return _internal_date();
}
inline void Registration::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  date_ = value;
}
inline void Registration::set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:PFAData.Registration.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PFAData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MetaData_2eproto
